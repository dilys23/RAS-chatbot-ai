import os
import google.generativeai as genai
from dotenv import load_dotenv
import requests
from datetime import datetime

# Load API keys from .env
load_dotenv()
gemini_api_key = os.getenv("GEMINI_API_KEY")
weather_api_key = os.getenv("WEATHER_API_KEY")

genai.configure(api_key=gemini_api_key)
model = genai.GenerativeModel("gemini-2.0-flash")
chat = model.start_chat(history=[])


def get_weather_by_location(lat, lon):
    try:
        url = f"https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={weather_api_key}&units=metric&lang=vi"
        response = requests.get(url)
        data = response.json()

        if response.status_code != 200:
            return "Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu th·ªùi ti·∫øt t·∫°i v·ªã tr√≠ c·ªßa b·∫°n."

        temp = data["main"]["temp"]
        weather = data["weather"][0]["description"]
        humidity = data["main"]["humidity"]
        city = data["name"]

        advice = f"Hi·ªán t·∫°i th·ªùi ti·∫øt ·ªü {city} l√† {weather}, nhi·ªát ƒë·ªô {temp}¬∞C, ƒë·ªô ·∫©m {humidity}%. "
        if temp > 35:
            advice += (
                "‚ö†Ô∏è N·∫Øng n√≥ng gay g·∫Øt, b·∫°n n√™n u·ªëng nhi·ªÅu n∆∞·ªõc, tr√°nh ra ngo√†i l√∫c tr∆∞a."
            )
        elif temp < 18:
            advice += "‚ö†Ô∏è Tr·ªùi l·∫°nh, b·∫°n n√™n gi·ªØ ·∫•m v√† h·∫°n ch·∫ø ra ngo√†i v√†o s√°ng s·ªõm."
        else:
            advice += (
                "üå§Ô∏è Th·ªùi ti·∫øt kh√° d·ªÖ ch·ªãu, b·∫°n v·∫´n n√™n ƒë·ªÅ ph√≤ng c√°c thay ƒë·ªïi b·∫•t th∆∞·ªùng."
            )

        return advice
    except Exception as e:
        return "L·ªói khi l·∫•y th√¥ng tin th·ªùi ti·∫øt: " + str(e)


def handle_user_input(user_input):
    sos_keywords = ["tai n·∫°n", "b·ªèng", "ng√£", "g√£y", "ch·∫£y m√°u", "ƒëau", "SOS"]
    has_emergency = any(keyword in user_input.lower() for keyword in sos_keywords)

    location_info = None
    if "lat=" in user_input and "lon=" in user_input:
        try:
            lat = float(user_input.split("lat=")[1].split()[0])
            lon = float(user_input.split("lon=")[1].split()[0])
            location_info = get_weather_by_location(lat, lon)
        except:
            location_info = "Kh√¥ng th·ªÉ ph√¢n t√≠ch v·ªã tr√≠ t·ª´ y√™u c·∫ßu c·ªßa b·∫°n."

    if has_emergency:
        context = "B·∫°n ƒëang trong t√¨nh hu·ªëng kh·∫©n c·∫•p. H√£y gi·ªØ b√¨nh tƒ©nh. Sau ƒë√¢y l√† h∆∞·ªõng d·∫´n s∆° c·ª©u:"
    else:
        weather_advice = (
            location_info
            or "Kh√¥ng c√≥ th√¥ng tin v·ªã tr√≠. H√£y cung c·∫•p to·∫° ƒë·ªô ƒë·ªÉ nh·∫≠n c·∫£nh b√°o th·ªùi ti·∫øt."
        )
        context = f"Kh√¥ng c√≥ t√¨nh hu·ªëng kh·∫©n c·∫•p ƒë∆∞·ª£c ghi nh·∫≠n. {weather_advice}\nNgo√†i ra, ƒë√¢y l√† m·ªôt s·ªë m·∫πo ƒë·ªÉ gi·ªØ an to√†n trong m√πa n√†y:"

    prompt = f"{context}\nNg∆∞·ªùi d√πng n√≥i: {user_input}\n‚Üí Tr·∫£ l·ªùi m·ªôt c√°ch d·ªÖ hi·ªÉu, ng·∫Øn g·ªçn, chi ti·∫øt, d·ªÖ hi·ªÉu v√† th√¢n thi·ªán."
    response = chat.send_message(prompt)
    return response.text.strip()


def chat_terminal():
    print("üö® AI SOS Chatbot (CLI mode) üö®")
    print("G√µ 'exit' ƒë·ªÉ tho√°t.")
    print("B·∫°n c√≥ th·ªÉ cung c·∫•p v·ªã tr√≠ b·∫±ng c√∫ ph√°p: lat=16.06 lon=108.20\n")
    while True:
        user_input = input("üë§ B·∫°n: ")
        if user_input.lower() in ["exit", "quit"]:
            break
        try:
            reply = handle_user_input(user_input)
            print("ü§ñ AI:", reply)
        except Exception as e:
            print("‚ùå L·ªói khi g·ªçi API:", str(e))


if __name__ == "__main__":
    chat_terminal()
